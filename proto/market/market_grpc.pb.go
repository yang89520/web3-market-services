// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: proto/market.proto

package market

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MarketServices_GetSupportAsset_FullMethodName = "/web3.market.MarketServices/getSupportAsset"
	MarketServices_GetMarketPrice_FullMethodName  = "/web3.market.MarketServices/getMarketPrice"
)

// MarketServicesClient is the client API for MarketServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketServicesClient interface {
	GetSupportAsset(ctx context.Context, in *SupportAssetRequest, opts ...grpc.CallOption) (*SupportAssetResponse, error)
	GetMarketPrice(ctx context.Context, in *MarketPriceRequest, opts ...grpc.CallOption) (*MarketPriceResponse, error)
}

type marketServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketServicesClient(cc grpc.ClientConnInterface) MarketServicesClient {
	return &marketServicesClient{cc}
}

func (c *marketServicesClient) GetSupportAsset(ctx context.Context, in *SupportAssetRequest, opts ...grpc.CallOption) (*SupportAssetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupportAssetResponse)
	err := c.cc.Invoke(ctx, MarketServices_GetSupportAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServicesClient) GetMarketPrice(ctx context.Context, in *MarketPriceRequest, opts ...grpc.CallOption) (*MarketPriceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarketPriceResponse)
	err := c.cc.Invoke(ctx, MarketServices_GetMarketPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketServicesServer is the server API for MarketServices service.
// All implementations should embed UnimplementedMarketServicesServer
// for forward compatibility.
type MarketServicesServer interface {
	GetSupportAsset(context.Context, *SupportAssetRequest) (*SupportAssetResponse, error)
	GetMarketPrice(context.Context, *MarketPriceRequest) (*MarketPriceResponse, error)
}

// UnimplementedMarketServicesServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMarketServicesServer struct{}

func (UnimplementedMarketServicesServer) GetSupportAsset(context.Context, *SupportAssetRequest) (*SupportAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportAsset not implemented")
}
func (UnimplementedMarketServicesServer) GetMarketPrice(context.Context, *MarketPriceRequest) (*MarketPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketPrice not implemented")
}
func (UnimplementedMarketServicesServer) testEmbeddedByValue() {}

// UnsafeMarketServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketServicesServer will
// result in compilation errors.
type UnsafeMarketServicesServer interface {
	mustEmbedUnimplementedMarketServicesServer()
}

func RegisterMarketServicesServer(s grpc.ServiceRegistrar, srv MarketServicesServer) {
	// If the following call pancis, it indicates UnimplementedMarketServicesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MarketServices_ServiceDesc, srv)
}

func _MarketServices_GetSupportAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServicesServer).GetSupportAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketServices_GetSupportAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServicesServer).GetSupportAsset(ctx, req.(*SupportAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketServices_GetMarketPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServicesServer).GetMarketPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketServices_GetMarketPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServicesServer).GetMarketPrice(ctx, req.(*MarketPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MarketServices_ServiceDesc is the grpc.ServiceDesc for MarketServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "web3.market.MarketServices",
	HandlerType: (*MarketServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getSupportAsset",
			Handler:    _MarketServices_GetSupportAsset_Handler,
		},
		{
			MethodName: "getMarketPrice",
			Handler:    _MarketServices_GetMarketPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/market.proto",
}
